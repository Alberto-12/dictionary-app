{"ast":null,"code":"var _jsxFileName = \"/Users/julieserafini/Desktop/dictionary-app/src/components/CustomSelectBox/CustomSelectBox.js\",\n  _s = $RefreshSig$();\nimport Arrow from \"../../assets/images/icon-arrow-down.svg\";\nimport \"./CustomSelectBox.css\";\nimport Logo from \"../../assets/images/logo.svg\";\nimport React, { useState } from 'react';\n\n/*const CustomSelectBox = ({ darkMode }) => {\n  const [selectedOption, setSelectedOption] = useState(\"San Serif\");\n  const options = [\"San Serif\", \"Serif\", \"Mono\"];\n  const [isOptionsOpen, setIsOptionsOpen] = useState(false);\n\n  const handleOptionChange = (event) => {\n    setSelectedOption(event.target.value);\n  };\n\n  const handleArrowClick = () => {\n    setIsOptionsOpen(!isOptionsOpen);\n  };\n\n  return (\n    <div id=\"header-container\" className={darkMode ? \"dark-mode\" : \"\"}>\n      <img src={Logo} alt=\"Logo\" />\n      <div className={`custom-select-box ${darkMode ? \"dark-mode\" : \"\"}`}>\n        <div className={`select-box ${isOptionsOpen ? \"open\" : \"\"}`}>\n          <div className=\"selected-option\" onClick={handleArrowClick}>\n            {selectedOption}\n            <img id=\"arrow\" src={Arrow} alt=\"Arrow down\" />\n          </div>\n          {isOptionsOpen && (\n            <div className=\"options\">\n              {options.map((option) => (\n                <div\n                  key={option}\n                  className={`option ${\n                    selectedOption === option ? \"selected\" : \"\"\n                  }`}\n                  onClick={() => {\n                    handleOptionChange({ target: { value: option } });\n                    handleArrowClick();\n                  }}\n                >\n                  {option}\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CustomSelectBox = _ref => {\n  _s();\n  let {\n    darkMode\n  } = _ref;\n  const [selectBoxes, setSelectBoxes] = useState([]);\n  const [selectedItem, setSelectedItem] = useState({});\n  {\n    selectBoxes.map((selectBox, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"select-selected\",\n      children: selectedItem[selectBox.id] || \"Select an option\"\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 3\n    }, this));\n  }\n  const [isOpen, setIsOpen] = useState({});\n  {\n    selectBoxes.map((selectBox, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `select-options ${isOpen[selectBox.id] ? \"select-options--visible\" : \"\"}`,\n      children: Array.from(selectBox.querySelectorAll(\"option\")).map((option, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => handleOptionClick(selectBox, option),\n        className: `select-option ${selectedItem[selectBox.id] === option.value ? \"select-option--selected\" : \"\"}`,\n        children: option.textContent\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 7\n      }, this))\n    }, `${index}-options`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 3\n    }, this));\n  }\n  function handleOptionClick(selectBox, option) {\n    const newSelectedItem = {\n      ...selectedItem\n    };\n    newSelectedItem[selectBox.id] = option.value;\n    setSelectedItem(newSelectedItem);\n    selectBox.value = option.value;\n    const newIsOpen = {\n      ...isOpen\n    };\n    newIsOpen[selectBox.id] = false;\n    setIsOpen(newIsOpen);\n  }\n  function handleSelectClick(selectBox) {\n    const newIsOpen = {\n      ...isOpen\n    };\n    Object.keys(newIsOpen).forEach(id => {\n      if (id !== selectBox.id) {\n        newIsOpen[id] = false;\n      }\n    });\n    newIsOpen[selectBox.id] = !isOpen[selectBox.id];\n    setIsOpen(newIsOpen);\n  }\n  ;\n  function handleSelectClick(selectBox) {\n    const newIsOpen = {\n      ...isOpen\n    };\n    Object.keys(newIsOpen).forEach(id => {\n      if (id !== selectBox.id) {\n        newIsOpen[id] = false;\n      }\n    });\n    newIsOpen[selectBox.id] = !isOpen[selectBox.id];\n    setIsOpen(newIsOpen);\n  }\n  ;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"header-container\",\n      className: darkMode ? \"dark-mode\" : \"\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: Logo,\n        alt: \"Logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"custom-select\",\n        style: {\n          width: \"180px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"select\", {\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"1\",\n            children: \"Sans Serif\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"2\",\n            children: \"Serif\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"3\",\n            children: \"Mono\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: Arrow,\n          alt: \"Arrow down\",\n          className: \"select-arrow\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 5\n  }, this);\n};\n_s(CustomSelectBox, \"awLYPibhanw8w2zO93Qsi4/eBt0=\");\n_c = CustomSelectBox;\nexport default CustomSelectBox;\nvar _c;\n$RefreshReg$(_c, \"CustomSelectBox\");","map":{"version":3,"names":["Arrow","Logo","React","useState","jsxDEV","_jsxDEV","CustomSelectBox","_ref","_s","darkMode","selectBoxes","setSelectBoxes","selectedItem","setSelectedItem","map","selectBox","index","className","children","id","fileName","_jsxFileName","lineNumber","columnNumber","isOpen","setIsOpen","Array","from","querySelectorAll","option","onClick","handleOptionClick","value","textContent","newSelectedItem","newIsOpen","handleSelectClick","Object","keys","forEach","src","alt","style","width","_c","$RefreshReg$"],"sources":["/Users/julieserafini/Desktop/dictionary-app/src/components/CustomSelectBox/CustomSelectBox.js"],"sourcesContent":["import Arrow from \"../../assets/images/icon-arrow-down.svg\";\nimport \"./CustomSelectBox.css\";\nimport Logo from \"../../assets/images/logo.svg\";\nimport React, { useState } from 'react';\n\n/*const CustomSelectBox = ({ darkMode }) => {\n  const [selectedOption, setSelectedOption] = useState(\"San Serif\");\n  const options = [\"San Serif\", \"Serif\", \"Mono\"];\n  const [isOptionsOpen, setIsOptionsOpen] = useState(false);\n\n  const handleOptionChange = (event) => {\n    setSelectedOption(event.target.value);\n  };\n\n  const handleArrowClick = () => {\n    setIsOptionsOpen(!isOptionsOpen);\n  };\n\n  return (\n    <div id=\"header-container\" className={darkMode ? \"dark-mode\" : \"\"}>\n      <img src={Logo} alt=\"Logo\" />\n      <div className={`custom-select-box ${darkMode ? \"dark-mode\" : \"\"}`}>\n        <div className={`select-box ${isOptionsOpen ? \"open\" : \"\"}`}>\n          <div className=\"selected-option\" onClick={handleArrowClick}>\n            {selectedOption}\n            <img id=\"arrow\" src={Arrow} alt=\"Arrow down\" />\n          </div>\n          {isOptionsOpen && (\n            <div className=\"options\">\n              {options.map((option) => (\n                <div\n                  key={option}\n                  className={`option ${\n                    selectedOption === option ? \"selected\" : \"\"\n                  }`}\n                  onClick={() => {\n                    handleOptionChange({ target: { value: option } });\n                    handleArrowClick();\n                  }}\n                >\n                  {option}\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};*/\n\nconst CustomSelectBox = ({ darkMode }) => {\n\n    const [selectBoxes, setSelectBoxes] = useState([]);\n\n    const [selectedItem, setSelectedItem] = useState({});\n\n{selectBoxes.map((selectBox, index) => (\n  <div key={index} className=\"select-selected\">\n    {selectedItem[selectBox.id] || \"Select an option\"}\n  </div>\n))}\n\nconst [isOpen, setIsOpen] = useState({});\n\n{selectBoxes.map((selectBox, index) => (\n  <div\n    key={`${index}-options`}\n    className={`select-options ${\n      isOpen[selectBox.id] ? \"select-options--visible\" : \"\"\n    }`}\n  >\n    {Array.from(selectBox.querySelectorAll(\"option\")).map((option, index) => (\n      <div\n        key={index}\n        onClick={() => handleOptionClick(selectBox, option)}\n        className={`select-option ${\n          selectedItem[selectBox.id] === option.value\n            ? \"select-option--selected\"\n            : \"\"\n        }`}\n      >\n        {option.textContent}\n      </div>\n    ))}\n  </div>\n))}\n\nfunction handleOptionClick(selectBox, option) {\n    const newSelectedItem = { ...selectedItem };\n    newSelectedItem[selectBox.id] = option.value;\n    setSelectedItem(newSelectedItem);\n    selectBox.value = option.value;\n  \n    const newIsOpen = { ...isOpen };\n    newIsOpen[selectBox.id] = false;\n    setIsOpen(newIsOpen);\n  }\n\n  function handleSelectClick(selectBox) {\n    const newIsOpen = { ...isOpen };\n    Object.keys(newIsOpen).forEach((id) => {\n      if (id !== selectBox.id) {\n        newIsOpen[id] = false;\n      }\n    });\n  \n    newIsOpen[selectBox.id] = !isOpen[selectBox.id];\n    setIsOpen(newIsOpen);\n  };\n\n  function handleSelectClick(selectBox) {\n    const newIsOpen = { ...isOpen };\n    Object.keys(newIsOpen).forEach((id) => {\n      if (id !== selectBox.id) {\n        newIsOpen[id] = false;\n      }\n    });\n  \n    newIsOpen[selectBox.id] = !isOpen[selectBox.id];\n    setIsOpen(newIsOpen);\n  };\n  \n  \n\n\n\n\n  return (\n    <div>\n        <div id=\"header-container\" className={darkMode ? \"dark-mode\" : \"\"}>\n      <img src={Logo} alt=\"Logo\" />\n      <div className=\"custom-select\" style={{width:\"180px\"}}>\n      <select>\n          <option value=\"1\">Sans Serif</option>\n          <option value=\"2\">Serif</option>\n          <option value=\"3\">Mono</option>\n      </select>\n      <img src={Arrow} alt=\"Arrow down\"  className=\"select-arrow\"/>\n      </div>\n\n      </div>\n    </div>\n  )\n}\n\nexport default CustomSelectBox\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}