{"ast":null,"code":"var _jsxFileName = \"/Users/julieserafini/Desktop/dictionary-app/src/components/CustomSelectBox/CustomSelectBox.js\",\n  _s = $RefreshSig$();\nimport Arrow from \"../../assets/images/icon-arrow-down.svg\";\nimport \"./CustomSelectBox.css\";\nimport Logo from \"../../assets/images/logo.svg\";\nimport React, { useState } from 'react';\n\n/*const CustomSelectBox = ({ darkMode }) => {\n  const [selectedOption, setSelectedOption] = useState(\"San Serif\");\n  const options = [\"San Serif\", \"Serif\", \"Mono\"];\n  const [isOptionsOpen, setIsOptionsOpen] = useState(false);\n\n  const handleOptionChange = (event) => {\n    setSelectedOption(event.target.value);\n  };\n\n  const handleArrowClick = () => {\n    setIsOptionsOpen(!isOptionsOpen);\n  };\n\n  return (\n    <div id=\"header-container\" className={darkMode ? \"dark-mode\" : \"\"}>\n      <img src={Logo} alt=\"Logo\" />\n      <div className={`custom-select-box ${darkMode ? \"dark-mode\" : \"\"}`}>\n        <div className={`select-box ${isOptionsOpen ? \"open\" : \"\"}`}>\n          <div className=\"selected-option\" onClick={handleArrowClick}>\n            {selectedOption}\n            <img id=\"arrow\" src={Arrow} alt=\"Arrow down\" />\n          </div>\n          {isOptionsOpen && (\n            <div className=\"options\">\n              {options.map((option) => (\n                <div\n                  key={option}\n                  className={`option ${\n                    selectedOption === option ? \"selected\" : \"\"\n                  }`}\n                  onClick={() => {\n                    handleOptionChange({ target: { value: option } });\n                    handleArrowClick();\n                  }}\n                >\n                  {option}\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CustomSelectBox = _ref => {\n  _s();\n  let {\n    darkMode\n  } = _ref;\n  const [selectedItem, setSelectedItem] = useState({});\n  const [isOpen, setIsOpen] = useState({});\n  function handleOptionClick(selectBox, option) {\n    const newSelectedItem = {\n      ...selectedItem\n    };\n    newSelectedItem[selectBox.id] = option.value;\n    setSelectedItem(newSelectedItem);\n    selectBox.value = option.value;\n    const newIsOpen = {\n      ...isOpen\n    };\n    newIsOpen[selectBox.id] = false;\n    setIsOpen(newIsOpen);\n  }\n  function handleSelectClick(selectBox) {\n    const newIsOpen = {\n      ...isOpen\n    };\n    Object.keys(newIsOpen).forEach(id => {\n      if (id !== selectBox.id) {\n        newIsOpen[id] = false;\n      }\n    });\n    newIsOpen[selectBox.id] = !isOpen[selectBox.id];\n    setIsOpen(newIsOpen);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"header-container\",\n      className: darkMode ? \"dark-mode\" : \"\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: Logo,\n        alt: \"Logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"custom-select\",\n        style: {\n          width: \"180px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"select\", {\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"1\",\n            children: \"Sans Serif\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"2\",\n            children: \"Serif\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"3\",\n            children: \"Mono\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: Arrow,\n          alt: \"Arrow down\",\n          className: \"select-arrow\",\n          onClick: event => {\n            const selectBox = event.target.previousSibling;\n            handleSelectClick(selectBox);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 7\n  }, this);\n};\n_s(CustomSelectBox, \"rKfgWa8pK0tf3C+euiA8LJSHTOs=\");\n_c = CustomSelectBox;\nexport default CustomSelectBox;\nvar _c;\n$RefreshReg$(_c, \"CustomSelectBox\");","map":{"version":3,"names":["Arrow","Logo","React","useState","jsxDEV","_jsxDEV","CustomSelectBox","_ref","_s","darkMode","selectedItem","setSelectedItem","isOpen","setIsOpen","handleOptionClick","selectBox","option","newSelectedItem","id","value","newIsOpen","handleSelectClick","Object","keys","forEach","children","className","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","style","width","onClick","event","target","previousSibling","_c","$RefreshReg$"],"sources":["/Users/julieserafini/Desktop/dictionary-app/src/components/CustomSelectBox/CustomSelectBox.js"],"sourcesContent":["import Arrow from \"../../assets/images/icon-arrow-down.svg\";\nimport \"./CustomSelectBox.css\";\nimport Logo from \"../../assets/images/logo.svg\";\nimport React, { useState } from 'react';\n\n/*const CustomSelectBox = ({ darkMode }) => {\n  const [selectedOption, setSelectedOption] = useState(\"San Serif\");\n  const options = [\"San Serif\", \"Serif\", \"Mono\"];\n  const [isOptionsOpen, setIsOptionsOpen] = useState(false);\n\n  const handleOptionChange = (event) => {\n    setSelectedOption(event.target.value);\n  };\n\n  const handleArrowClick = () => {\n    setIsOptionsOpen(!isOptionsOpen);\n  };\n\n  return (\n    <div id=\"header-container\" className={darkMode ? \"dark-mode\" : \"\"}>\n      <img src={Logo} alt=\"Logo\" />\n      <div className={`custom-select-box ${darkMode ? \"dark-mode\" : \"\"}`}>\n        <div className={`select-box ${isOptionsOpen ? \"open\" : \"\"}`}>\n          <div className=\"selected-option\" onClick={handleArrowClick}>\n            {selectedOption}\n            <img id=\"arrow\" src={Arrow} alt=\"Arrow down\" />\n          </div>\n          {isOptionsOpen && (\n            <div className=\"options\">\n              {options.map((option) => (\n                <div\n                  key={option}\n                  className={`option ${\n                    selectedOption === option ? \"selected\" : \"\"\n                  }`}\n                  onClick={() => {\n                    handleOptionChange({ target: { value: option } });\n                    handleArrowClick();\n                  }}\n                >\n                  {option}\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};*/\n\nconst CustomSelectBox = ({ darkMode }) => {\n    const [selectedItem, setSelectedItem] = useState({});\n  \n    const [isOpen, setIsOpen] = useState({});\n  \n    function handleOptionClick(selectBox, option) {\n      const newSelectedItem = { ...selectedItem };\n      newSelectedItem[selectBox.id] = option.value;\n      setSelectedItem(newSelectedItem);\n      selectBox.value = option.value;\n  \n      const newIsOpen = { ...isOpen };\n      newIsOpen[selectBox.id] = false;\n      setIsOpen(newIsOpen);\n    }\n  \n    function handleSelectClick(selectBox) {\n      const newIsOpen = { ...isOpen };\n      Object.keys(newIsOpen).forEach((id) => {\n        if (id !== selectBox.id) {\n          newIsOpen[id] = false;\n        }\n      });\n  \n      newIsOpen[selectBox.id] = !isOpen[selectBox.id];\n      setIsOpen(newIsOpen);\n    }\n  \n    return (\n      <div>\n        <div id=\"header-container\" className={darkMode ? \"dark-mode\" : \"\"}>\n          <img src={Logo} alt=\"Logo\" />\n          <div className=\"custom-select\" style={{ width: \"180px\" }}>\n            <select>\n              <option value=\"1\">Sans Serif</option>\n              <option value=\"2\">Serif</option>\n              <option value=\"3\">Mono</option>\n            </select>\n            <img\n              src={Arrow}\n              alt=\"Arrow down\"\n              className=\"select-arrow\"\n              onClick={(event) => {\n                const selectBox = event.target.previousSibling;\n                handleSelectClick(selectBox);\n              }}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  };\n  \n  export default CustomSelectBox;\n  \n  \n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}