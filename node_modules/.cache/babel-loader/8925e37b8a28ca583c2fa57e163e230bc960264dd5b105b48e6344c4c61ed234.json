{"ast":null,"code":"var _jsxFileName = \"/Users/julieserafini/Desktop/dictionary-app/src/components/CustomSelectBox/CustomSelectBox.js\",\n  _s = $RefreshSig$();\nimport Arrow from \"../../assets/images/icon-arrow-down.svg\";\nimport \"./CustomSelectBox.css\";\nimport Logo from \"../../assets/images/logo.svg\";\nimport React, { useState, useEffect, useRef } from \"react\";\n\n/*const CustomSelectBox = ({ darkMode }) => {\n  const [selectedOption, setSelectedOption] = useState(\"San Serif\");\n  const [selectedFontFamily, setSelectedFontFamily] = useState(\"Inter\");\n  const options = [ \"San Serif\",  \"Serif\", \"Mono\"];\n  const [isOptionsOpen, setIsOptionsOpen] = useState(false);\n  const ref = useRef(null);\n\n  const handleArrowClick = () => {\n    setIsOptionsOpen(!isOptionsOpen);\n    setSelectedFontFamily(selectedOption === \"San Serif\" ? \"Inter\" : selectedOption === \"Serif\" ? \"Lora\" : \"Inconsolata\");\n    options.map((option) => {\n      if (option === selectedOption) {\n        ref.current.querySelector(`[data-font=\"${selectedFontFamily}\"]`).classList.add('selected');\n      } else {\n        ref.current.querySelector(`[data-font=\"${option === \"San Serif\" ? \"Inter\" : option === \"Serif\" ? \"Lora\" : \"Inconsolata\"}\"]`).classList.remove('selected');\n      }\n    });\n  };\n  \n\n  useEffect(() => {\n    const handleClickOutside = (event) => {\n      if (ref.current && !ref.current.contains(event.target)) {\n        setIsOptionsOpen(false);\n      }\n    };\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, [ref]);\n\n  return (\n    <div id=\"header-container\" \n    className={darkMode ? \"dark-mode\" : \"\"}\n    >\n      <img src={Logo} alt=\"Logo\" />\n      <div className={`custom-select-box ${darkMode ? \"dark-mode\" : \"\"}`}>\n        <div className={`select-box ${isOptionsOpen ? \"open\" : \"\"}`} ref={ref}>\n        <div className={`selected-option ${selectedOption === \"San Serif\" ? \"inter-font\" : selectedOption === \"Serif\" ? \"lora-font\" : selectedOption === \"Mono\" ? \"inconsolata-font\" : \"\"}`} onClick={handleArrowClick}>\n            {selectedOption}\n            <img id=\"arrow\" src={Arrow} alt=\"Arrow down\" />\n          </div>\n          {isOptionsOpen && (\n            <div className=\"options\">\n              {options.map((option) => (\n                <div\n                  key={option}\n                  className={`option ${\n                    selectedOption === option ? \"selected\" : \"\"\n                  }`}\n                  data-font={option === \"San Serif\" ? \"Inter\" : option === \"Serif\" ? \"Lora\" : option === \"Mono\" ? \"Inconsolata\" : null}\n                  onClick={() => {\n                    setSelectedOption(option);\n                    setIsOptionsOpen(false);\n                    setSelectedFontFamily(option === \"San Serif\" ? \"Inter\" : option === \"Serif\" ? \"Lora\" : \"Inconsolata\");\n                    options.map((option) => {\n                      if (option === selectedOption) {\n                        ref.current.querySelector(`[data-font=\"${selectedFontFamily}\"]`).classList.add('selected');\n                      } else {\n                        ref.current.querySelector(`[data-font=\"${option === \"San Serif\" ? \"Inter\" : option === \"Serif\" ? \"Lora\" : \"Inconsolata\"}\"]`).classList.remove('selected');\n                      }\n                    });\n                  }}\n                  \n                >\n                  {option}\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CustomSelectBox;*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CustomSelectBox = _ref => {\n  _s();\n  let {\n    darkMode\n  } = _ref;\n  const [selectedOption, setSelectedOption] = useState(\"San Serif\");\n  const [fontFamily, setFontFamily] = useState(\"Inter\");\n  const options = [{\n    label: \"San Serif\",\n    value: \"Inter\",\n    dataFont: \"Inter\"\n  }, {\n    label: \"Serif\",\n    value: \"Lora\",\n    dataFont: \"Lora\"\n  }, {\n    label: \"Mono\",\n    value: \"Inconsolata\",\n    dataFont: \"Inconsolata\"\n  }];\n  const [isOptionsOpen, setIsOptionsOpen] = useState(false);\n  const ref = useRef(null);\n  const handleArrowClick = () => {\n    setIsOptionsOpen(!isOptionsOpen);\n  };\n  const handleOptionClick = option => {\n    setSelectedOption(option);\n    setIsOptionsOpen(false);\n    const selectedOption = options.find(o => o.label === option);\n    if (selectedOption) {\n      setFontFamily(selectedOption.dataFont);\n    }\n  };\n  useEffect(() => {\n    console.log(\"fontFamily:\", fontFamily);\n    if (ref.current) {\n      const selectedElement = ref.current.querySelector(`[data-font=\"${fontFamily}\"]`);\n      console.log(\"selectedElement:\", selectedElement);\n      if (selectedElement) {\n        selectedElement.classList.add(\"selected\");\n      }\n    }\n  }, [ref, fontFamily]);\n  useEffect(() => {\n    const handleClickOutside = event => {\n      if (ref.current && !ref.current.contains(event.target)) {\n        setIsOptionsOpen(false);\n      }\n    };\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, [ref]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"header-container\",\n    className: darkMode ? \"dark-mode\" : \"\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: Logo,\n      alt: \"Logo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `custom-select-box ${darkMode ? \"dark-mode\" : \"\"}`,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `select-box ${isOptionsOpen ? \"open\" : \"\"}`,\n        ref: ref,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: `selected-option ${selectedOption.toLowerCase()}-font`,\n          onClick: handleArrowClick,\n          children: [selectedOption, /*#__PURE__*/_jsxDEV(\"img\", {\n            id: \"arrow\",\n            src: Arrow,\n            alt: \"Arrow down\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 13\n        }, this), isOptionsOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"options\",\n          style: {\n            fontFamily: fontFamily\n          },\n          children: options.map(option => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `option ${selectedOption === option ? \"selected\" : \"\"}`,\n            \"data-font\": option === \"San Serif\" ? \"Inter\" : option === \"Serif\" ? \"Lora\" : \"Inconsolata\",\n            onClick: () => handleOptionClick(option),\n            children: option\n          }, option, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 7\n  }, this);\n};\n_s(CustomSelectBox, \"VjrgZ6/Xcn6oXQuTAVD3jVKm2xQ=\");\n_c = CustomSelectBox;\nexport default CustomSelectBox;\nvar _c;\n$RefreshReg$(_c, \"CustomSelectBox\");","map":{"version":3,"names":["Arrow","Logo","React","useState","useEffect","useRef","jsxDEV","_jsxDEV","CustomSelectBox","_ref","_s","darkMode","selectedOption","setSelectedOption","fontFamily","setFontFamily","options","label","value","dataFont","isOptionsOpen","setIsOptionsOpen","ref","handleArrowClick","handleOptionClick","option","find","o","console","log","current","selectedElement","querySelector","classList","add","handleClickOutside","event","contains","target","document","addEventListener","removeEventListener","id","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","toLowerCase","onClick","style","map","_c","$RefreshReg$"],"sources":["/Users/julieserafini/Desktop/dictionary-app/src/components/CustomSelectBox/CustomSelectBox.js"],"sourcesContent":["import Arrow from \"../../assets/images/icon-arrow-down.svg\";\nimport \"./CustomSelectBox.css\";\nimport Logo from \"../../assets/images/logo.svg\";\nimport React, { useState, useEffect, useRef } from \"react\";\n\n/*const CustomSelectBox = ({ darkMode }) => {\n  const [selectedOption, setSelectedOption] = useState(\"San Serif\");\n  const [selectedFontFamily, setSelectedFontFamily] = useState(\"Inter\");\n  const options = [ \"San Serif\",  \"Serif\", \"Mono\"];\n  const [isOptionsOpen, setIsOptionsOpen] = useState(false);\n  const ref = useRef(null);\n\n  const handleArrowClick = () => {\n    setIsOptionsOpen(!isOptionsOpen);\n    setSelectedFontFamily(selectedOption === \"San Serif\" ? \"Inter\" : selectedOption === \"Serif\" ? \"Lora\" : \"Inconsolata\");\n    options.map((option) => {\n      if (option === selectedOption) {\n        ref.current.querySelector(`[data-font=\"${selectedFontFamily}\"]`).classList.add('selected');\n      } else {\n        ref.current.querySelector(`[data-font=\"${option === \"San Serif\" ? \"Inter\" : option === \"Serif\" ? \"Lora\" : \"Inconsolata\"}\"]`).classList.remove('selected');\n      }\n    });\n  };\n  \n\n  useEffect(() => {\n    const handleClickOutside = (event) => {\n      if (ref.current && !ref.current.contains(event.target)) {\n        setIsOptionsOpen(false);\n      }\n    };\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, [ref]);\n\n  return (\n    <div id=\"header-container\" \n    className={darkMode ? \"dark-mode\" : \"\"}\n    >\n      <img src={Logo} alt=\"Logo\" />\n      <div className={`custom-select-box ${darkMode ? \"dark-mode\" : \"\"}`}>\n        <div className={`select-box ${isOptionsOpen ? \"open\" : \"\"}`} ref={ref}>\n        <div className={`selected-option ${selectedOption === \"San Serif\" ? \"inter-font\" : selectedOption === \"Serif\" ? \"lora-font\" : selectedOption === \"Mono\" ? \"inconsolata-font\" : \"\"}`} onClick={handleArrowClick}>\n            {selectedOption}\n            <img id=\"arrow\" src={Arrow} alt=\"Arrow down\" />\n          </div>\n          {isOptionsOpen && (\n            <div className=\"options\">\n              {options.map((option) => (\n                <div\n                  key={option}\n                  className={`option ${\n                    selectedOption === option ? \"selected\" : \"\"\n                  }`}\n                  data-font={option === \"San Serif\" ? \"Inter\" : option === \"Serif\" ? \"Lora\" : option === \"Mono\" ? \"Inconsolata\" : null}\n                  onClick={() => {\n                    setSelectedOption(option);\n                    setIsOptionsOpen(false);\n                    setSelectedFontFamily(option === \"San Serif\" ? \"Inter\" : option === \"Serif\" ? \"Lora\" : \"Inconsolata\");\n                    options.map((option) => {\n                      if (option === selectedOption) {\n                        ref.current.querySelector(`[data-font=\"${selectedFontFamily}\"]`).classList.add('selected');\n                      } else {\n                        ref.current.querySelector(`[data-font=\"${option === \"San Serif\" ? \"Inter\" : option === \"Serif\" ? \"Lora\" : \"Inconsolata\"}\"]`).classList.remove('selected');\n                      }\n                    });\n                  }}\n                  \n                >\n                  {option}\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CustomSelectBox;*/\n\nconst CustomSelectBox = ({ darkMode }) => {\n    const [selectedOption, setSelectedOption] = useState(\"San Serif\");\n    const [fontFamily, setFontFamily] = useState(\"Inter\");\n    const options = [\n        { label: \"San Serif\", value: \"Inter\", dataFont: \"Inter\" },\n        { label: \"Serif\", value: \"Lora\", dataFont: \"Lora\" },\n        { label: \"Mono\", value: \"Inconsolata\", dataFont: \"Inconsolata\" },\n      ];\n    const [isOptionsOpen, setIsOptionsOpen] = useState(false);\n    const ref = useRef(null);\n  \n    const handleArrowClick = () => {\n      setIsOptionsOpen(!isOptionsOpen);\n    };\n  \n    const handleOptionClick = (option) => {\n        setSelectedOption(option);\n        setIsOptionsOpen(false);\n        const selectedOption = options.find((o) => o.label === option);\n        if (selectedOption) {\n          setFontFamily(selectedOption.dataFont);\n        }\n      };\n      \n  \n    useEffect(() => {\n        console.log(\"fontFamily:\", fontFamily);\n        if (ref.current) {\n          const selectedElement = ref.current.querySelector(`[data-font=\"${fontFamily}\"]`);\n          console.log(\"selectedElement:\", selectedElement);\n          if (selectedElement) {\n            selectedElement.classList.add(\"selected\");\n          }\n        }\n      }, [ref, fontFamily]);\n      \n      \n      \n  \n    useEffect(() => {\n      const handleClickOutside = (event) => {\n        if (ref.current && !ref.current.contains(event.target)) {\n          setIsOptionsOpen(false);\n        }\n      };\n      document.addEventListener(\"mousedown\", handleClickOutside);\n      return () => {\n        document.removeEventListener(\"mousedown\", handleClickOutside);\n      };\n    }, [ref]);\n  \n    return (\n      <div\n        id=\"header-container\"\n        className={darkMode ? \"dark-mode\" : \"\"}\n      >\n        <img src={Logo} alt=\"Logo\" />\n        <div className={`custom-select-box ${darkMode ? \"dark-mode\" : \"\"}`}>\n          <div className={`select-box ${isOptionsOpen ? \"open\" : \"\"}`} ref={ref}>\n            <div\n              className={`selected-option ${selectedOption.toLowerCase()}-font`}\n              onClick={handleArrowClick}\n            >\n              {selectedOption}\n              <img id=\"arrow\" src={Arrow} alt=\"Arrow down\" />\n            </div>\n            {isOptionsOpen && (\n              <div className=\"options\" style={{ fontFamily: fontFamily }}>\n                {options.map((option) => (\n                  <div\n                    key={option}\n                    className={`option ${\n                      selectedOption === option ? \"selected\" : \"\"\n                    }`}\n                    data-font={option === \"San Serif\" ? \"Inter\" : option === \"Serif\" ? \"Lora\" : \"Inconsolata\"}\n                    onClick={() => handleOptionClick(option)}\n                  >\n                    {option}\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  export default CustomSelectBox;\n  \n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}