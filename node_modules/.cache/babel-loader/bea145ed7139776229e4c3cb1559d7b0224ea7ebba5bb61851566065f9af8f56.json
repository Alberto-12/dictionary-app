{"ast":null,"code":"var _jsxFileName = \"/Users/julieserafini/Desktop/dictionary-app/src/components/CustomSelectBox/CustomSelectBox.js\",\n  _s = $RefreshSig$();\nimport Arrow from \"../../assets/images/icon-arrow-down.svg\";\nimport \"./CustomSelectBox.css\";\nimport Logo from \"../../assets/images/logo.svg\";\nimport React, { useState } from 'react';\n\n/*const CustomSelectBox = ({ darkMode }) => {\n  const [selectedOption, setSelectedOption] = useState(\"San Serif\");\n  const options = [\"San Serif\", \"Serif\", \"Mono\"];\n  const [isOptionsOpen, setIsOptionsOpen] = useState(false);\n\n  const handleOptionChange = (event) => {\n    setSelectedOption(event.target.value);\n  };\n\n  const handleArrowClick = () => {\n    setIsOptionsOpen(!isOptionsOpen);\n  };\n\n  return (\n    <div id=\"header-container\" className={darkMode ? \"dark-mode\" : \"\"}>\n      <img src={Logo} alt=\"Logo\" />\n      <div className={`custom-select-box ${darkMode ? \"dark-mode\" : \"\"}`}>\n        <div className={`select-box ${isOptionsOpen ? \"open\" : \"\"}`}>\n          <div className=\"selected-option\" onClick={handleArrowClick}>\n            {selectedOption}\n            <img id=\"arrow\" src={Arrow} alt=\"Arrow down\" />\n          </div>\n          {isOptionsOpen && (\n            <div className=\"options\">\n              {options.map((option) => (\n                <div\n                  key={option}\n                  className={`option ${\n                    selectedOption === option ? \"selected\" : \"\"\n                  }`}\n                  onClick={() => {\n                    handleOptionChange({ target: { value: option } });\n                    handleArrowClick();\n                  }}\n                >\n                  {option}\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CustomSelectBox = _ref => {\n  _s();\n  let {\n    darkMode\n  } = _ref;\n  const [selectedItem, setSelectedItem] = useState(\"\");\n  const [isOpen, setIsOpen] = useState(false);\n  function handleSelectChange(event) {\n    setSelectedItem(event.target.value);\n  }\n  function handleSelectItemClick(value) {\n    setSelectedItem(value);\n    setIsOpen(false);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"header-container\",\n      className: darkMode ? \"dark-mode\" : \"\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: Logo,\n        alt: \"Logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"custom-select\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"select-selected\",\n          onClick: () => setIsOpen(!isOpen),\n          children: selectedItem || \"Select a font style\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `select-items ${isOpen ? \"\" : \"select-hide\"}`,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: `select-item ${selectedItem === \"Sans Serif\" ? \"same-as-selected\" : \"\"}`,\n            onClick: () => handleSelectItemClick(\"Sans Serif\"),\n            children: \"Sans Serif\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `select-item ${selectedItem === \"Serif\" ? \"same-as-selected\" : \"\"}`,\n            onClick: () => handleSelectItemClick(\"Serif\"),\n            children: \"Serif\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `select-item ${selectedItem === \"Mono\" ? \"same-as-selected\" : \"\"}`,\n            onClick: () => handleSelectItemClick(\"Mono\"),\n            children: \"Mono\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: Arrow,\n          alt: \"Arrow down\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 7\n  }, this);\n};\n_s(CustomSelectBox, \"eqvxvPqe7LZTfmkngCknN8qZ2Qc=\");\n_c = CustomSelectBox;\nexport default CustomSelectBox;\nvar _c;\n$RefreshReg$(_c, \"CustomSelectBox\");","map":{"version":3,"names":["Arrow","Logo","React","useState","jsxDEV","_jsxDEV","CustomSelectBox","_ref","_s","darkMode","selectedItem","setSelectedItem","isOpen","setIsOpen","handleSelectChange","event","target","value","handleSelectItemClick","children","id","className","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/julieserafini/Desktop/dictionary-app/src/components/CustomSelectBox/CustomSelectBox.js"],"sourcesContent":["import Arrow from \"../../assets/images/icon-arrow-down.svg\";\nimport \"./CustomSelectBox.css\";\nimport Logo from \"../../assets/images/logo.svg\";\nimport React, { useState } from 'react';\n\n/*const CustomSelectBox = ({ darkMode }) => {\n  const [selectedOption, setSelectedOption] = useState(\"San Serif\");\n  const options = [\"San Serif\", \"Serif\", \"Mono\"];\n  const [isOptionsOpen, setIsOptionsOpen] = useState(false);\n\n  const handleOptionChange = (event) => {\n    setSelectedOption(event.target.value);\n  };\n\n  const handleArrowClick = () => {\n    setIsOptionsOpen(!isOptionsOpen);\n  };\n\n  return (\n    <div id=\"header-container\" className={darkMode ? \"dark-mode\" : \"\"}>\n      <img src={Logo} alt=\"Logo\" />\n      <div className={`custom-select-box ${darkMode ? \"dark-mode\" : \"\"}`}>\n        <div className={`select-box ${isOptionsOpen ? \"open\" : \"\"}`}>\n          <div className=\"selected-option\" onClick={handleArrowClick}>\n            {selectedOption}\n            <img id=\"arrow\" src={Arrow} alt=\"Arrow down\" />\n          </div>\n          {isOptionsOpen && (\n            <div className=\"options\">\n              {options.map((option) => (\n                <div\n                  key={option}\n                  className={`option ${\n                    selectedOption === option ? \"selected\" : \"\"\n                  }`}\n                  onClick={() => {\n                    handleOptionChange({ target: { value: option } });\n                    handleArrowClick();\n                  }}\n                >\n                  {option}\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};*/\n\nconst CustomSelectBox = ({ darkMode }) => {\n    const [selectedItem, setSelectedItem] = useState(\"\");\n    const [isOpen, setIsOpen] = useState(false);\n  \n    function handleSelectChange(event) {\n      setSelectedItem(event.target.value);\n    }\n  \n    function handleSelectItemClick(value) {\n      setSelectedItem(value);\n      setIsOpen(false);\n    }\n  \n    return (\n      <div>\n        <div id=\"header-container\" className={darkMode ? \"dark-mode\" : \"\"}>\n          <img src={Logo} alt=\"Logo\" />\n          <div className=\"custom-select\">\n            <div\n              className=\"select-selected\"\n              onClick={() => setIsOpen(!isOpen)}\n            >\n              {selectedItem || \"Select a font style\"}\n            </div>\n            <div\n              className={`select-items ${isOpen ? \"\" : \"select-hide\"}`}\n            >\n              <div\n                className={`select-item ${\n                  selectedItem === \"Sans Serif\" ? \"same-as-selected\" : \"\"\n                }`}\n                onClick={() => handleSelectItemClick(\"Sans Serif\")}\n              >\n                Sans Serif\n              </div>\n              <div\n                className={`select-item ${\n                  selectedItem === \"Serif\" ? \"same-as-selected\" : \"\"\n                }`}\n                onClick={() => handleSelectItemClick(\"Serif\")}\n              >\n                Serif\n              </div>\n              <div\n                className={`select-item ${\n                  selectedItem === \"Mono\" ? \"same-as-selected\" : \"\"\n                }`}\n                onClick={() => handleSelectItemClick(\"Mono\")}\n              >\n                Mono\n              </div>\n            </div>\n            <img src={Arrow} alt=\"Arrow down\" />\n          </div>\n        </div>\n      </div>\n    );\n  };\n  \n  export default CustomSelectBox;\n  \n  \n  \n  \n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}