{"ast":null,"code":"var _jsxFileName = \"/Users/julieserafini/Desktop/dictionary-app/src/components/CustomSelectBox/CustomSelectBox.js\",\n  _s = $RefreshSig$();\nimport Arrow from \"../../assets/images/icon-arrow-down.svg\";\nimport \"./CustomSelectBox.css\";\nimport Logo from \"../../assets/images/logo.svg\";\nimport React, { useState, useEffect, useRef } from \"react\";\n\n/*const CustomSelectBox = ({ darkMode }) => {\n    const [selectedOption, setSelectedOption] = useState({\n      label: \"San Serif\",\n      value: \"Inter\"\n    });\n    const [fontFamily, setFontFamily] = useState(\"Inter\");\n    const options = [\n      { label: \"San Serif\", value: \"Inter\", dataFont: \"Inter\" },\n      { label: \"Serif\", value: \"Lora\", dataFont: \"Lora\" },\n      { label: \"Mono\", value: \"Inconsolata\", dataFont: \"Inconsolata\" },\n    ];\n    const [isOptionsOpen, setIsOptionsOpen] = useState(false);\n    const ref = useRef(null);\n  \n    const handleArrowClick = () => {\n      setIsOptionsOpen(!isOptionsOpen);\n    };\n  \n    const handleOptionClick = (option) => {\n      setSelectedOption(option);\n      setIsOptionsOpen(false);\n      const selectedOption = options.find((o) => o.label === option.label);\n      if (selectedOption) {\n        setFontFamily(selectedOption.dataFont);\n      }\n    };\n    \n  \n    useEffect(() => {\n      console.log(\"fontFamily:\", fontFamily);\n      if (ref.current) {\n        const selectedElement = ref.current.querySelector(`[data-font=\"${fontFamily}\"]`);\n        console.log(\"selectedElement:\", selectedElement);\n        if (selectedElement) {\n          selectedElement.classList.add(\"selected\");\n        }\n      }\n    }, [ref, fontFamily]);\n    \n    \n    \n  \n    useEffect(() => {\n      const handleClickOutside = (event) => {\n        if (ref.current && !ref.current.contains(event.target)) {\n          setIsOptionsOpen(false);\n        }\n      };\n      document.addEventListener(\"mousedown\", handleClickOutside);\n      return () => {\n        document.removeEventListener(\"mousedown\", handleClickOutside);\n      };\n    }, [ref]);\n  \n    return (\n      <div\n        id=\"header-container\"\n        className={darkMode ? \"dark-mode\" : \"\"}\n      >\n        <img src={Logo} alt=\"Logo\" />\n        <div className={`custom-select-box ${darkMode ? \"dark-mode\" : \"\"}`}>\n          <div className={`select-box ${isOptionsOpen ? \"open\" : \"\"}`} ref={ref}>\n            <div\n              className={`selected-option ${selectedOption.value.toLowerCase()}-font`}\n              onClick={handleArrowClick}\n            >\n              {selectedOption.label}\n              <img id=\"arrow\" src={Arrow} alt=\"Arrow down\" />\n            </div>\n            {isOptionsOpen && (\n              <div className=\"options\" style={{ fontFamily: fontFamily }}>\n                {options.map((option) => (\n                  <div\n                    key={option.value}\n                    className={`option ${\n                      selectedOption.value === option.value ? \"selected\" : \"\"\n                    }`}\n                    data-font={option.dataFont}\n                    onClick={() => handleOptionClick(option)}\n                  >\n                    {option.label}\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  };\n  \n  export default CustomSelectBox;*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CustomSelectBox = _ref => {\n  _s();\n  let {\n    darkMode,\n    options\n  } = _ref;\n  const [selectedOption, setSelectedOption] = useState(options[0]);\n  const [isOptionsOpen, setIsOptionsOpen] = useState(false);\n  const ref = useRef(null);\n  const handleOptionClick = option => {\n    setSelectedOption(option);\n    setIsOptionsOpen(false);\n  };\n  useEffect(() => {\n    const handleClickOutside = event => {\n      if (ref.current && !ref.current.contains(event.target)) {\n        setIsOptionsOpen(false);\n      }\n    };\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, [ref]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"header-container\",\n    className: darkMode ? \"dark-mode\" : \"\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: Logo,\n      alt: \"Logo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `custom-select-box ${darkMode ? \"dark-mode\" : \"\"}`,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"select-box\",\n        ref: ref,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: `selected-option ${selectedOption.value.toLowerCase()}-font`,\n          onClick: () => setIsOptionsOpen(!isOptionsOpen),\n          children: [selectedOption.label, /*#__PURE__*/_jsxDEV(\"img\", {\n            id: \"arrow\",\n            src: Arrow,\n            alt: \"Arrow down\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this), isOptionsOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"options\",\n          style: {\n            fontFamily: selectedOption.dataFont\n          },\n          children: options.map(option => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `option ${selectedOption.value === option.value ? \"selected\" : \"\"}`,\n            \"data-font\": option.dataFont,\n            onClick: () => handleOptionClick(option),\n            children: option.label\n          }, option.value, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 5\n  }, this);\n};\n_s(CustomSelectBox, \"sSCe9iFhKLqOAQFEgQgbhsi4cRo=\");\n_c = CustomSelectBox;\nexport default CustomSelectBox;\nvar _c;\n$RefreshReg$(_c, \"CustomSelectBox\");","map":{"version":3,"names":["Arrow","Logo","React","useState","useEffect","useRef","jsxDEV","_jsxDEV","CustomSelectBox","_ref","_s","darkMode","options","selectedOption","setSelectedOption","isOptionsOpen","setIsOptionsOpen","ref","handleOptionClick","option","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","id","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","value","toLowerCase","onClick","label","style","fontFamily","dataFont","map","_c","$RefreshReg$"],"sources":["/Users/julieserafini/Desktop/dictionary-app/src/components/CustomSelectBox/CustomSelectBox.js"],"sourcesContent":["import Arrow from \"../../assets/images/icon-arrow-down.svg\";\nimport \"./CustomSelectBox.css\";\nimport Logo from \"../../assets/images/logo.svg\";\nimport React, { useState, useEffect, useRef } from \"react\";\n\n/*const CustomSelectBox = ({ darkMode }) => {\n    const [selectedOption, setSelectedOption] = useState({\n      label: \"San Serif\",\n      value: \"Inter\"\n    });\n    const [fontFamily, setFontFamily] = useState(\"Inter\");\n    const options = [\n      { label: \"San Serif\", value: \"Inter\", dataFont: \"Inter\" },\n      { label: \"Serif\", value: \"Lora\", dataFont: \"Lora\" },\n      { label: \"Mono\", value: \"Inconsolata\", dataFont: \"Inconsolata\" },\n    ];\n    const [isOptionsOpen, setIsOptionsOpen] = useState(false);\n    const ref = useRef(null);\n  \n    const handleArrowClick = () => {\n      setIsOptionsOpen(!isOptionsOpen);\n    };\n  \n    const handleOptionClick = (option) => {\n      setSelectedOption(option);\n      setIsOptionsOpen(false);\n      const selectedOption = options.find((o) => o.label === option.label);\n      if (selectedOption) {\n        setFontFamily(selectedOption.dataFont);\n      }\n    };\n    \n  \n    useEffect(() => {\n      console.log(\"fontFamily:\", fontFamily);\n      if (ref.current) {\n        const selectedElement = ref.current.querySelector(`[data-font=\"${fontFamily}\"]`);\n        console.log(\"selectedElement:\", selectedElement);\n        if (selectedElement) {\n          selectedElement.classList.add(\"selected\");\n        }\n      }\n    }, [ref, fontFamily]);\n    \n    \n    \n  \n    useEffect(() => {\n      const handleClickOutside = (event) => {\n        if (ref.current && !ref.current.contains(event.target)) {\n          setIsOptionsOpen(false);\n        }\n      };\n      document.addEventListener(\"mousedown\", handleClickOutside);\n      return () => {\n        document.removeEventListener(\"mousedown\", handleClickOutside);\n      };\n    }, [ref]);\n  \n    return (\n      <div\n        id=\"header-container\"\n        className={darkMode ? \"dark-mode\" : \"\"}\n      >\n        <img src={Logo} alt=\"Logo\" />\n        <div className={`custom-select-box ${darkMode ? \"dark-mode\" : \"\"}`}>\n          <div className={`select-box ${isOptionsOpen ? \"open\" : \"\"}`} ref={ref}>\n            <div\n              className={`selected-option ${selectedOption.value.toLowerCase()}-font`}\n              onClick={handleArrowClick}\n            >\n              {selectedOption.label}\n              <img id=\"arrow\" src={Arrow} alt=\"Arrow down\" />\n            </div>\n            {isOptionsOpen && (\n              <div className=\"options\" style={{ fontFamily: fontFamily }}>\n                {options.map((option) => (\n                  <div\n                    key={option.value}\n                    className={`option ${\n                      selectedOption.value === option.value ? \"selected\" : \"\"\n                    }`}\n                    data-font={option.dataFont}\n                    onClick={() => handleOptionClick(option)}\n                  >\n                    {option.label}\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  };\n  \n  export default CustomSelectBox;*/\n\nconst CustomSelectBox = ({ darkMode, options }) => {\n  const [selectedOption, setSelectedOption] = useState(options[0]);\n  const [isOptionsOpen, setIsOptionsOpen] = useState(false);\n  const ref = useRef(null);\n\n  const handleOptionClick = (option) => {\n    setSelectedOption(option);\n    setIsOptionsOpen(false);\n  };\n\n  useEffect(() => {\n    const handleClickOutside = (event) => {\n      if (ref.current && !ref.current.contains(event.target)) {\n        setIsOptionsOpen(false);\n      }\n    };\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, [ref]);\n\n  return (\n    <div id=\"header-container\" className={darkMode ? \"dark-mode\" : \"\"}>\n      <img src={Logo} alt=\"Logo\" />\n      <div className={`custom-select-box ${darkMode ? \"dark-mode\" : \"\"}`}>\n        <div className=\"select-box\" ref={ref}>\n          <div\n            className={`selected-option ${selectedOption.value.toLowerCase()}-font`}\n            onClick={() => setIsOptionsOpen(!isOptionsOpen)}\n          >\n            {selectedOption.label}\n            <img id=\"arrow\" src={Arrow} alt=\"Arrow down\" />\n          </div>\n          {isOptionsOpen && (\n            <div className=\"options\" style={{ fontFamily: selectedOption.dataFont }}>\n              {options.map((option) => (\n                <div\n                  key={option.value}\n                  className={`option ${selectedOption.value === option.value ? \"selected\" : \"\"}`}\n                  data-font={option.dataFont}\n                  onClick={() => handleOptionClick(option)}\n                >\n                  {option.label}\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CustomSelectBox;\n\n  \n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}